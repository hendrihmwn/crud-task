// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/hendrihmwn/crud-task-backend/model"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

type AuthUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUseCase) EXPECT() *AuthUseCase_Expecter {
	return &AuthUseCase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, param
func (_m *AuthUseCase) Login(ctx context.Context, param model.LoginParam) (model.AuthResponse, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginParam) (model.AuthResponse, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginParam) model.AuthResponse); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(model.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUseCase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthUseCase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - param model.LoginParam
func (_e *AuthUseCase_Expecter) Login(ctx interface{}, param interface{}) *AuthUseCase_Login_Call {
	return &AuthUseCase_Login_Call{Call: _e.mock.On("Login", ctx, param)}
}

func (_c *AuthUseCase_Login_Call) Run(run func(ctx context.Context, param model.LoginParam)) *AuthUseCase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.LoginParam))
	})
	return _c
}

func (_c *AuthUseCase_Login_Call) Return(res model.AuthResponse, err error) *AuthUseCase_Login_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *AuthUseCase_Login_Call) RunAndReturn(run func(context.Context, model.LoginParam) (model.AuthResponse, error)) *AuthUseCase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
