// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/hendrihmwn/crud-task-backend/model"
)

// TaskUseCase is an autogenerated mock type for the TaskUseCase type
type TaskUseCase struct {
	mock.Mock
}

type TaskUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskUseCase) EXPECT() *TaskUseCase_Expecter {
	return &TaskUseCase_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, body
func (_m *TaskUseCase) CreateTask(ctx context.Context, body model.TaskBodyParam) (*model.TaskResponse, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *model.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.TaskBodyParam) (*model.TaskResponse, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.TaskBodyParam) *model.TaskResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.TaskBodyParam) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskUseCase_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TaskUseCase_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - body model.TaskBodyParam
func (_e *TaskUseCase_Expecter) CreateTask(ctx interface{}, body interface{}) *TaskUseCase_CreateTask_Call {
	return &TaskUseCase_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, body)}
}

func (_c *TaskUseCase_CreateTask_Call) Run(run func(ctx context.Context, body model.TaskBodyParam)) *TaskUseCase_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.TaskBodyParam))
	})
	return _c
}

func (_c *TaskUseCase_CreateTask_Call) Return(res *model.TaskResponse, err error) *TaskUseCase_CreateTask_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *TaskUseCase_CreateTask_Call) RunAndReturn(run func(context.Context, model.TaskBodyParam) (*model.TaskResponse, error)) *TaskUseCase_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *TaskUseCase) DeleteTask(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskUseCase_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type TaskUseCase_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskUseCase_Expecter) DeleteTask(ctx interface{}, id interface{}) *TaskUseCase_DeleteTask_Call {
	return &TaskUseCase_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, id)}
}

func (_c *TaskUseCase_DeleteTask_Call) Run(run func(ctx context.Context, id string)) *TaskUseCase_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskUseCase_DeleteTask_Call) Return(err error) *TaskUseCase_DeleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUseCase_DeleteTask_Call) RunAndReturn(run func(context.Context, string) error) *TaskUseCase_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, id
func (_m *TaskUseCase) GetTask(ctx context.Context, id string) (*model.TaskResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *model.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TaskResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TaskResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskUseCase_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type TaskUseCase_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskUseCase_Expecter) GetTask(ctx interface{}, id interface{}) *TaskUseCase_GetTask_Call {
	return &TaskUseCase_GetTask_Call{Call: _e.mock.On("GetTask", ctx, id)}
}

func (_c *TaskUseCase_GetTask_Call) Run(run func(ctx context.Context, id string)) *TaskUseCase_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskUseCase_GetTask_Call) Return(res *model.TaskResponse, err error) *TaskUseCase_GetTask_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *TaskUseCase_GetTask_Call) RunAndReturn(run func(context.Context, string) (*model.TaskResponse, error)) *TaskUseCase_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListTask provides a mock function with given fields: ctx, param
func (_m *TaskUseCase) ListTask(ctx context.Context, param model.TaskListParam) ([]model.TaskResponse, int, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for ListTask")
	}

	var r0 []model.TaskResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.TaskListParam) ([]model.TaskResponse, int, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.TaskListParam) []model.TaskResponse); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.TaskListParam) int); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.TaskListParam) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TaskUseCase_ListTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTask'
type TaskUseCase_ListTask_Call struct {
	*mock.Call
}

// ListTask is a helper method to define mock.On call
//   - ctx context.Context
//   - param model.TaskListParam
func (_e *TaskUseCase_Expecter) ListTask(ctx interface{}, param interface{}) *TaskUseCase_ListTask_Call {
	return &TaskUseCase_ListTask_Call{Call: _e.mock.On("ListTask", ctx, param)}
}

func (_c *TaskUseCase_ListTask_Call) Run(run func(ctx context.Context, param model.TaskListParam)) *TaskUseCase_ListTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.TaskListParam))
	})
	return _c
}

func (_c *TaskUseCase_ListTask_Call) Return(res []model.TaskResponse, size int, err error) *TaskUseCase_ListTask_Call {
	_c.Call.Return(res, size, err)
	return _c
}

func (_c *TaskUseCase_ListTask_Call) RunAndReturn(run func(context.Context, model.TaskListParam) ([]model.TaskResponse, int, error)) *TaskUseCase_ListTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: ctx, id, body
func (_m *TaskUseCase) UpdateTask(ctx context.Context, id string, body model.TaskBodyParam) (*model.TaskResponse, error) {
	ret := _m.Called(ctx, id, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *model.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.TaskBodyParam) (*model.TaskResponse, error)); ok {
		return rf(ctx, id, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.TaskBodyParam) *model.TaskResponse); ok {
		r0 = rf(ctx, id, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.TaskBodyParam) error); ok {
		r1 = rf(ctx, id, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskUseCase_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type TaskUseCase_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - body model.TaskBodyParam
func (_e *TaskUseCase_Expecter) UpdateTask(ctx interface{}, id interface{}, body interface{}) *TaskUseCase_UpdateTask_Call {
	return &TaskUseCase_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, id, body)}
}

func (_c *TaskUseCase_UpdateTask_Call) Run(run func(ctx context.Context, id string, body model.TaskBodyParam)) *TaskUseCase_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(model.TaskBodyParam))
	})
	return _c
}

func (_c *TaskUseCase_UpdateTask_Call) Return(res *model.TaskResponse, err error) *TaskUseCase_UpdateTask_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *TaskUseCase_UpdateTask_Call) RunAndReturn(run func(context.Context, string, model.TaskBodyParam) (*model.TaskResponse, error)) *TaskUseCase_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskUseCase creates a new instance of TaskUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUseCase {
	mock := &TaskUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
