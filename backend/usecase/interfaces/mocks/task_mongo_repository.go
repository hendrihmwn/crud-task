// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/hendrihmwn/crud-task-backend/model"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskMongoRepository is an autogenerated mock type for the TaskMongoRepository type
type TaskMongoRepository struct {
	mock.Mock
}

type TaskMongoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskMongoRepository) EXPECT() *TaskMongoRepository_Expecter {
	return &TaskMongoRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *TaskMongoRepository) Create(ctx context.Context, req *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) (*model.Task, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.Task); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskMongoRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TaskMongoRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *model.Task
func (_e *TaskMongoRepository_Expecter) Create(ctx interface{}, req interface{}) *TaskMongoRepository_Create_Call {
	return &TaskMongoRepository_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *TaskMongoRepository_Create_Call) Run(run func(ctx context.Context, req *model.Task)) *TaskMongoRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Task))
	})
	return _c
}

func (_c *TaskMongoRepository_Create_Call) Return(res *model.Task, err error) *TaskMongoRepository_Create_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *TaskMongoRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Task) (*model.Task, error)) *TaskMongoRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TaskMongoRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskMongoRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TaskMongoRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskMongoRepository_Expecter) Delete(ctx interface{}, id interface{}) *TaskMongoRepository_Delete_Call {
	return &TaskMongoRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *TaskMongoRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *TaskMongoRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskMongoRepository_Delete_Call) Return(_a0 error) *TaskMongoRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskMongoRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *TaskMongoRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TaskMongoRepository) GetByID(ctx context.Context, id string) (*model.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskMongoRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type TaskMongoRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskMongoRepository_Expecter) GetByID(ctx interface{}, id interface{}) *TaskMongoRepository_GetByID_Call {
	return &TaskMongoRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *TaskMongoRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *TaskMongoRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskMongoRepository_GetByID_Call) Return(req *model.Task, err error) *TaskMongoRepository_GetByID_Call {
	_c.Call.Return(req, err)
	return _c
}

func (_c *TaskMongoRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*model.Task, error)) *TaskMongoRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter, page, limit, sortField, sortOrder, searchText
func (_m *TaskMongoRepository) List(ctx context.Context, filter primitive.M, page int64, limit int64, sortField string, sortOrder int, searchText string) ([]*model.Task, int64, error) {
	ret := _m.Called(ctx, filter, page, limit, sortField, sortOrder, searchText)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Task
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int64, int64, string, int, string) ([]*model.Task, int64, error)); ok {
		return rf(ctx, filter, page, limit, sortField, sortOrder, searchText)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int64, int64, string, int, string) []*model.Task); ok {
		r0 = rf(ctx, filter, page, limit, sortField, sortOrder, searchText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, int64, int64, string, int, string) int64); ok {
		r1 = rf(ctx, filter, page, limit, sortField, sortOrder, searchText)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.M, int64, int64, string, int, string) error); ok {
		r2 = rf(ctx, filter, page, limit, sortField, sortOrder, searchText)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TaskMongoRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type TaskMongoRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter primitive.M
//   - page int64
//   - limit int64
//   - sortField string
//   - sortOrder int
//   - searchText string
func (_e *TaskMongoRepository_Expecter) List(ctx interface{}, filter interface{}, page interface{}, limit interface{}, sortField interface{}, sortOrder interface{}, searchText interface{}) *TaskMongoRepository_List_Call {
	return &TaskMongoRepository_List_Call{Call: _e.mock.On("List", ctx, filter, page, limit, sortField, sortOrder, searchText)}
}

func (_c *TaskMongoRepository_List_Call) Run(run func(ctx context.Context, filter primitive.M, page int64, limit int64, sortField string, sortOrder int, searchText string)) *TaskMongoRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.M), args[2].(int64), args[3].(int64), args[4].(string), args[5].(int), args[6].(string))
	})
	return _c
}

func (_c *TaskMongoRepository_List_Call) Return(_a0 []*model.Task, _a1 int64, _a2 error) *TaskMongoRepository_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TaskMongoRepository_List_Call) RunAndReturn(run func(context.Context, primitive.M, int64, int64, string, int, string) ([]*model.Task, int64, error)) *TaskMongoRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, update
func (_m *TaskMongoRepository) Update(ctx context.Context, id string, update primitive.M) (*model.Task, error) {
	ret := _m.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, primitive.M) (*model.Task, error)); ok {
		return rf(ctx, id, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, primitive.M) *model.Task); ok {
		r0 = rf(ctx, id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, primitive.M) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskMongoRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TaskMongoRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - update primitive.M
func (_e *TaskMongoRepository_Expecter) Update(ctx interface{}, id interface{}, update interface{}) *TaskMongoRepository_Update_Call {
	return &TaskMongoRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, update)}
}

func (_c *TaskMongoRepository_Update_Call) Run(run func(ctx context.Context, id string, update primitive.M)) *TaskMongoRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(primitive.M))
	})
	return _c
}

func (_c *TaskMongoRepository_Update_Call) Return(res *model.Task, err error) *TaskMongoRepository_Update_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *TaskMongoRepository_Update_Call) RunAndReturn(run func(context.Context, string, primitive.M) (*model.Task, error)) *TaskMongoRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskMongoRepository creates a new instance of TaskMongoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskMongoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskMongoRepository {
	mock := &TaskMongoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
